//Script closing NOC TT. Made by Krylov Semen 02.10.2025 
async function close_one_TT(){

//Main Grid: doubleClick on TT
let frames = document.getElementsByTagName("iframe");
let iframe1 = document.getElementById(frames[0].id).contentWindow;
console.log("Main Grid: doubleClick on TT");
let rrr = iframe1.document.getElementById('PageContainer_IncidentsModulePage_Grid_TreeGrid');
let bbb = iframe1.document.elementFromPoint(rrr.getBoundingClientRect().x+10, rrr.getBoundingClientRect().y+31);
bbb.dispatchEvent(new MouseEvent("dblclick", {view: window,bubbles: true,cancelable: true,clientX: rrr.getBoundingClientRect().x+10,clientY: rrr.getBoundingClientRect().y+31,button: 0}));

//Waiting for TT Form opened...
let frames2 = iframe1.document.getElementsByTagName("iframe");
let frame2 = iframe1.document.getElementById(frames2[0].id).contentWindow;
console.log("Waiting for TT Form opened...");
let tt7 = 0;
do{
	let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
	let result = await promise;
	console.log("Waiting for TT Form opened: %s times",tt7);
	//do check
	if (typeof frame2.document.getElementById('PageContainer_DataTabPanel') !== 'undefined'){
		break;
	}
	tt7++;	
	if (tt7>20) break;
}
while(true)

//*************************************************************************************** another Frame *******************************************************
//Main on TT Form Thread

//Initializing button 'Save'
console.log("Initializing button 'Save'...");
/*let button_Save_gen = '';
let i_save = 30;
do{
	if (i_save >100){
		console.log("Error initializing Save Button. Too many attempts riched.");
	 	break;
	}
	let ss = 'ext-gen8' + i_save.toString();
	console.log("Trying: %s", ss);
	button_Save_gen = frame2.document.getElementById(ss);
	if (button_Save_gen == null){
		//console.log("Element %s is null", ss);
		i_save++;
		continue;
	} 
	
	if (button_Save_gen.getInnerText=='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'){		
		console.log("Button 'Save' with ID '%s' is initilized successfuly",ss);
		button_Save_gen = ss;
		break;
	}
	i_save++;
}
while (true);*/

let button_Save_gen_text = frame2.document.getElementById('PageContainer_SaveButton').querySelector('button').innerText;
console.log("Button 'Save' with Caption '%s' is initilized successfuly", button_Save_gen_text);
	
//Initializing button 'OK'
console.log("Initializing button 'OK'...");
/*let button_OK_gen = '';
let i_ok = 10;
do{
	if (i_ok >100){
		console.log("Error initializing OK Button. Too many attempts riched.");
	 	break;
	}
	let ss = 'ext-gen8' + i_ok.toString();
	console.log("Trying: %s", ss);
	button_OK_gen = frame2.document.getElementById(ss);
	if (button_OK_gen == null){
		//console.log("Element %s is null", ss);
		i_ok++;
		continue;
	} 
	
	if (button_OK_gen.getInnerText=='–û–ö'){		
		console.log("Button 'OK' with ID '%s' is initilized successfuly",ss);
		button_OK_gen = ss;
		break;
	}
	i_ok++;
}
while (true);*/
let button_OK_gen_text = frame2.document.getElementById('PageContainer_OKButton').querySelector('button').innerText;
console.log("Button 'OK' with Caption '%s' is initilized successfuly", button_OK_gen_text);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async function simulateNaturalInput(element, text, delayBetweenChars = 50) {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
    element.focus();
    element.select();
    document.execCommand('delete');
    
    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    for (let i = 0; i < text.length; i++) {
        element.value += text[i];
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è input –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const inputEvent = new Event('input', { bubbles: true });
        element.dispatchEvent(inputEvent);
        
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        const randomDelay = delayBetweenChars + Math.random() * 30;
        await new Promise(resolve => setTimeout(resolve, randomDelay));
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    element.dispatchEvent(new Event('change', { bubbles: true }));
    element.dispatchEvent(new Event('blur', { bubbles: true }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
function simulateRealisticClick(element) {
    if (!element) return false;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
    const mouseDownEvent = new MouseEvent('mousedown', {
        view: window,
        bubbles: true,
        cancelable: true
    });
    element.dispatchEvent(mouseDownEvent);
    
    const mouseUpEvent = new MouseEvent('mouseup', {
        view: window,
        bubbles: true,
        cancelable: true
    });
    element.dispatchEvent(mouseUpEvent);
    
    const clickEvent = new MouseEvent('click', {
        view: window,
        bubbles: true,
        cancelable: true
    });
    element.dispatchEvent(clickEvent);
    
    return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function simulateDateTimeInput() {
    try {
        console.log("üöÄ –ù–∞—á–∞–ª–æ –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏");
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å");
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ö–ª–∏–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        console.log("üñ±Ô∏è –ö–ª–∏–∫ –Ω–∞ #ext-gen598");
        let ext_gen598 = frame2.document.getElementById('ext-gen598');
        if (!ext_gen598) {
            throw new Error("‚ùå –≠–ª–µ–º–µ–Ω—Ç #ext-gen598 –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        if (!simulateRealisticClick(ext_gen598)) {
            throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –Ω–∞ #ext-gen598");
        }
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∞—Ç—ã
        console.log("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ #PageContainer_SolutionDateEdit_Date");
        let sourceDateField = frame2.document.getElementById('PageContainer_SolutionDateEdit_Date');
        let sourceDate = '';
        
        if (sourceDateField && sourceDateField.value) {
            sourceDate = sourceDateField.value;
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞: " + sourceDate);
        } else {
            console.log("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            sourceDate = '31.12.2025';
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        console.log("‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ #PageContainer_SolutionDateEdit_Time");
        let sourceTimeField = frame2.document.getElementById('PageContainer_SolutionDateEdit_Time');
        let sourceTime = '';
        
        if (sourceTimeField && sourceTimeField.value) {
            sourceTime = sourceTimeField.value;
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è: " + sourceTime);
        } else {
            console.log("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            sourceTime = '23:45';
        }
        
        // –í–≤–æ–¥ –¥–∞—Ç—ã
        console.log("üéØ –ö–ª–∏–∫ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã #PageContainer_DeferredToDateTimeEdit_Date");
        let dateField = frame2.document.getElementById('PageContainer_DeferredToDateTimeEdit_Date');
        if (!dateField) {
            throw new Error("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
        
        simulateRealisticClick(dateField);
        
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã
        console.log("‚å®Ô∏è –í–≤–æ–¥ –¥–∞—Ç—ã: " + sourceDate);
        await simulateNaturalInput(dateField, sourceDate, 80);
        
        // –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–≤–æ–¥–æ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        console.log("‚è≥ –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏");
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        console.log("üéØ –ö–ª–∏–∫ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ #PageContainer_DeferredToDateTimeEdit_Time");
        let timeField = frame2.document.getElementById('PageContainer_DeferredToDateTimeEdit_Time');
        if (!timeField) {
            throw new Error("‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
        
        simulateRealisticClick(timeField);
        
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        console.log("‚å®Ô∏è –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: " + sourceTime);
        await simulateNaturalInput(timeField, sourceTime, 60);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log("‚è≥ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const finalDate = dateField.value;
        const finalTime = timeField.value;
        
        console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–æ–¥–∞:");
        console.log("   –î–∞—Ç–∞: " + finalDate);
        console.log("   –í—Ä–µ–º—è: " + finalTime);
        
        if (finalDate === sourceDate && finalTime === sourceTime) {
            console.log("‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –≤–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        } else {
            console.log("‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏");
        }
        
    } catch (error) {
        console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–≤–æ–¥–∞:", error.message);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ –∏–º–∏—Ç–∞—Ü–∏–∏
await simulateDateTimeInput();
	
//clicking on tab "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
console.log("Clicking on tab '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'");
let x1 = frame2.document.getElementById(frame2.PageContainer_DataTabPanel.getItem(1).tabHeader.id).getBoundingClientRect().x + 5;
let y1 = frame2.document.getElementById(frame2.PageContainer_DataTabPanel.getItem(1).tabHeader.id).getBoundingClientRect().y + 5;
frame2.document.elementFromPoint(x1, y1).click();

//waiting for tab "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" is downloading
console.log("Waiting for tab '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' is downloading");
let tt1=1;
do{	
	let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
	let result = await promise;
	console.log("Waiting for tab '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' is downloading: %s times",tt1);
	//do check
	if (typeof frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton !== 'undefined'){
		break;
	}
	tt1++;	
	if (tt1>20) return;	
}while(true)

//clicking on combobox '–ü—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏' drop down button
console.log("Clicking on combobox '–ü—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏' drop down button");
frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton.dispatchEvent(new Event("click"));

//waiting for combo "–ü—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏" item list is downloading
console.log("Waiting for combo '–ü—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏' item list is downloading");
let tt2=1;
do{	
	let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
	let result = await promise;
	console.log("Waiting for combo '–ü—Ä–∏—á–∏–Ω–∞ –∞–≤–∞—Ä–∏–∏' item list is downloading: %s times",tt2);
	//do check
	if (frame2.PageContainer_AccidentReasonForEquipmentEdit.listPrepared){
		break;	
	}
	tt2++;
	if (tt2>20) return;
}while(true)

//clicking on combo item "Cause Unknown"
console.log("Clicking on combo item 'Cause Unknown'");
let x2 = frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton.getBoundingClientRect().x;
let y2 = frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton.getBoundingClientRect().y+260;
let to_push = frame2.document.elementFromPoint(x2, y2);
if (typeof to_push == 'undefined') y2 = frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton.getBoundingClientRect().y-20;
if (to_push == null) y2 = frame2.PageContainer_AccidentReasonForEquipmentEdit_PrimaryToolButton.getBoundingClientRect().y-20;
frame2.document.elementFromPoint(x2, y2).click();

//clicking on tab "–î–∞–Ω–Ω—ã–µ"
console.log("Clicking on tab '–î–∞–Ω–Ω—ã–µ'");
let tt3 = 1;
do{
	if (frame2.PageContainer_DataTabPanel.activeTab.caption == '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'){		
		let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
		let result = await promise;
		let x4 = frame2.document.getElementById(frame2.PageContainer_DataTabPanel.getItem(0).tabHeader.id).getBoundingClientRect().x + 5;
		let y4 = frame2.document.getElementById(frame2.PageContainer_DataTabPanel.getItem(0).tabHeader.id).getBoundingClientRect().y + 5;
		frame2.document.elementFromPoint(x4, y4).click();
		console.log("Waiting for page '–î–∞–Ω–Ω—ã–µ' is downloading: %s times",tt3);
		tt3++;
		if (tt3>20) return;
	}
	else{
		break;
	}
}
while(true)

//clicking on button "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
console.log("Clicking on button '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'");
let x3 = frame2.document.getElementById('PageContainer_SaveButton').getBoundingClientRect().x+5;
let y3 = frame2.document.getElementById('PageContainer_SaveButton').getBoundingClientRect().y+5;
frame2.document.getElementById('PageContainer_SaveButton').querySelector('button').dispatchEvent(new MouseEvent("mousedown", {view: window,bubbles: true,cancelable: true,clientX: x3,clientY: y3,button: 0}));
frame2.document.getElementById('PageContainer_SaveButton').querySelector('button').dispatchEvent(new MouseEvent("mouseup", {view: window,bubbles: true,cancelable: true,clientX: x3,clientY: y3,button: 0}));


//Waiting for Saving Done
console.log("Waiting for Saving Done");
//let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 3000)});
//let result = await promise;
let tt5 = 1;
do{	
	console.log("Waiting for combo '–°—Ç–∞—Ç—É—Å' == '–í —Ä–∞–±–æ—Ç–µ': %s times",tt5);
	if (frame2.PageContainer_StatusEdit.selText == '–í —Ä–∞–±–æ—Ç–µ'){
		break;
	}
	let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
	let result = await promise;
	tt5++;
	if (tt5>20) return;
}
while(true)

//clicking on combo button "–°—Ç–∞—Ç—É—Å"
console.log("clicking on combo button '–°—Ç–∞—Ç—É—Å'");
frame2.PageContainer_StatusEdit_PrimaryToolButton.dispatchEvent(new Event("click"));

//Waiting for item '–†–µ—à–µ–Ω–∞' is clicked
let tt4 = 1;
do {	
		let promise = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 500)});
		let result = await promise;
		let rr = frame2.PageContainer_StatusEdit.getSelectedItem();
		if (rr.text!='–†–µ—à–µ–Ω–∞'){
			//clicking on combo item "–†–µ—à–µ–Ω–∞"
			console.log("clicking on combo item '–†–µ—à–µ–Ω–∞'");
			let x5 = frame2.PageContainer_StatusEdit_PrimaryToolButton.getBoundingClientRect().x;
			let y5 = frame2.PageContainer_StatusEdit_PrimaryToolButton.getBoundingClientRect().y+115;
			frame2.document.elementFromPoint(x5, y5).click();
			console.log("Waiting for item '–†–µ—à–µ–Ω–∞' is clicked: %s times",tt4);
			tt4++;
			if (tt4>20) return;
		}
		else{
			break;
		}
	
}
while(true)

//clicking on button "–û–ö"
console.log("clicking on button '–û–ö'");
let x6 = frame2.document.getElementById('PageContainer_OKButton').getBoundingClientRect().x+5;
let y6 = frame2.document.getElementById('PageContainer_OKButton').getBoundingClientRect().y+5;
frame2.document.getElementById('PageContainer_OKButton').querySelector('button').dispatchEvent(new MouseEvent("mousedown", {view: window,bubbles: true,cancelable: true,clientX: x6,clientY: y6,button: 0}));
frame2.document.getElementById('PageContainer_OKButton').querySelector('button').dispatchEvent(new MouseEvent("mouseup", {view: window,bubbles: true,cancelable: true,clientX: x6,clientY: y6,button: 0}));


//Wating for MAIN Form closed
//PAUSE 2000
//console.log("Pausing 2 sec");
//let promise1 = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 2000)});
//let result1 = await promise1;


//Main Grid: Clicking on sorting DataGrid '–°—Ç–∞—Ç—É—Å'
//console.log("Clicking on header 'Status' to sort TT");
//let hhh1 = iframe1.document.querySelector("table > thead > tr > td.x-treegrid-hd.x-treegrid-cell.x-treegrid-cell-DisplayStatus > div > div")
//iframe1.document.elementFromPoint(hhh1.getBoundingClientRect().x+5,hhh1.getBoundingClientRect().y+3).click();


//PAUSE 2000
//console.log("Pausing 2 sec");
//let promise2 = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 2000)});
//let result2 = await promise2;


//Main Grid: Clicking on sorting DataGrid '–°—Ç–∞—Ç—É—Å'
//console.log("Clicking on header 'Status' to sort TT");
//let hhh2 = iframe1.document.querySelector("table > thead > tr > td.x-treegrid-hd.x-treegrid-cell.x-treegrid-cell-DisplayStatus > div > div")
//iframe1.document.elementFromPoint(hhh2.getBoundingClientRect().x+5,hhh2.getBoundingClientRect().y+3).click();


//PAUSE 3000
console.log("Pausing 3 sec");
let promise3 = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 3000)});
let result3 = await promise3;

//Clicking on Refresh Button
console.log("Clicking on Refresh Button");
let brefr = iframe1.document.getElementsByClassName('x-toolbutton x-form-flash-toolbutton x-toolbutton-refresh');
iframe1.document.getElementById(brefr[0].id).dispatchEvent(new Event("click"));

//PAUSE 2000
console.log("Pausing 2 sec");
let promise4 = new Promise((resolve, reject) => {setTimeout(() => resolve("–≥–æ—Ç–æ–≤–æ!"), 2000)});
let result4 = await promise4;

}


async function closeTT(){
let COUNT = prompt("–°–∫–æ–ª—å–∫–æ –¢–¢ –∑–∞–∫—Ä—ã—Ç—å?", "5");
for(let i=0;i< COUNT;i++){await close_one_TT();console.log("%c–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã %s TT","color:blue", i+1);console.log("%c–°–ø–∞—Å–∏–±–æ –ö—Ä—ã–ª–æ–≤—É –°–µ–º–µ–Ω—É !!!","color:green");}
}


//**************************************************************************
closeTT();
//**************************************************************************
